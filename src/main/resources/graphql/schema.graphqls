enum Recurrence {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DietaryRestriction {
  VEGETARIAN
  GLUTEN_FREE
  NUT_ALLERGY
}

input MealEventInput {
  title: String!
  name: String!
  start: String!
  userId: String!
  recurrence: Recurrence
}

input UpdateMealEventInput {
  title: String
  name: String
  start: String
  userId: String
  recurrence: Recurrence
}

type MealEvent {
  id: String!
  title: String!
  name: String!
  start: String!
  userId: String!
  recurrence: Recurrence
}

type RecipeSummary {
  id: ID!
  title: String!
  image: String!
  sourceUrl: String
  spoonacularSourceUrl: String
}

type RecipeFull {
  id: ID!
  title: String!
  image: String!
  sourceUrl: String
  spoonacularSourceUrl: String

  healthScore: Int
  calories: Float
  dishTypes: [String!]!
  cuisines: [String!]!
  readyInMinutes: Int
  servings: Int
  vegetarian: Boolean!
  vegan: Boolean!
  glutenFree: Boolean!
  dairyFree: Boolean!
  summary: String
  instructions: String
  analyzedInstructions: [Instruction!]!
  nutrition: Nutrition
}

type Instruction {
  step: String!
  ingredients: [IngredientRef!]!
  equipment: [EquipmentRef!]!
}

type IngredientRef {
  id: ID!
  name: String!
}

type EquipmentRef {
  id: ID!
  name: String!
}

type Nutrition {
  nutrients: [Nutrient!]!
}

type Nutrient {
  name: String!
  amount: Float!
  unit: String!
}

type Query {
  getMealEventById(id: String!): MealEvent
  getMealEventsByUserId(userId: String!): [MealEvent]
  getRecipe(id: ID!): RecipeFull
  searchRecipes(
    query: String!
    restrictions: [DietaryRestriction!]
    number: Int = 10
  ): [RecipeSummary!]!
  searchRecipesByTitles(
    titles: [String!]!
    restrictions: [DietaryRestriction!]
  ): [RecipeSummary!]!
}

type Mutation {
  createMealEvent(input: MealEventInput!): MealEvent
  updateMealEvent(id: String!, input: UpdateMealEventInput!): MealEvent
  deleteMealEvent(id: String!): String
  generateAiMealSuggestion(
    prompt: String!
    restrictions: [DietaryRestriction!]!
  ): String
}
